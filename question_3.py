# -*- coding: utf-8 -*-
"""Question 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1us0ZWmf4976R_Mr4ZaXCC-P-h-hFR65-

**3. Kuwahara Filter**
"""

import cv2
import numpy as np
from scipy.ndimage import uniform_filter
from matplotlib import pyplot as plt

def kuwahara_filter(image, window_size=5):
    half_size = window_size // 2
    h, w = image.shape
    padded_image = np.pad(image, ((half_size, half_size), (half_size, half_size)), mode='reflect')

    result = np.zeros_like(image)

    for i in range(h):
        for j in range(w):
            # Define subregions (4 quadrants) and calculate local means and variances
            regions = []
            for dy in range(2):
                for dx in range(2):
                    region = padded_image[i + dy * half_size:i + (dy + 1) * half_size + 1,
                                          j + dx * half_size:j + (dx + 1) * half_size + 1]
                    local_mean = np.mean(region)
                    local_var = np.var(region)
                    regions.append((local_mean, local_var))

            # Choose region with smallest variance
            best_region_mean = min(regions, key=lambda x: x[1])[0]
            result[i, j] = best_region_mean

    return result.astype(np.uint8)

# Load image
image = cv2.imread('/content/image.jpg', 0)

# Apply Kuwahara filter
kuwahara_image = kuwahara_filter(image, window_size=5)

# Show results
plt.subplot(1, 2, 1), plt.imshow(image, cmap='gray'), plt.title('Original')
plt.subplot(1, 2, 2), plt.imshow(kuwahara_image, cmap='gray'), plt.title('Kuwahara Filter')
plt.show()

